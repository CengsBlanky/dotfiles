" predefined variables {{{
let vim_config_file="~/.vimrc"
" }}}
" editor {{{
" default {{{
set nocompatible
filetype plugin indent on
syntax on
set fileformat=unix
set fileformats=unix,dos
language en_US.UTF-8
" unicode characters in the file autoload/float.vim
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936
" let mapleader=","
" let maplocalleader=","
inoremap jk <esc>
" TextEdit might fail if hidden is not set.
set hidden
set number
set relativenumber
set backspace=2
set incsearch
set smartcase
set tabstop=4 shiftwidth=4 expandtab smartindent autoindent shiftround
set softtabstop=4
set showcmd
set laststatus=2
set wildmenu
set showmatch
" when file has been chaged outside of vim buffer, autoload it
set autoread
" when switch between buffers or execute specific command save current buffer
set autowrite
set confirm
" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=100
" set nobackup set nowritebackup set noswapfile set noundofile
set undodir=~/.vim/.undo//
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swp//
set clipboard=unnamed
set clipboard+=unnamedplus
" add ctags support
set tags=tags
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
" display
set hlsearch
set mousehide
set mouse=nv " enable mouse scroll etc...
set signcolumn=yes
set nowrap
set cmdheight=1
" add sub directories in current directory
set path+=**
" }}}
" keymappings {{{
" quick quit
nnoremap <Esc>q :x<CR>

" quick upper/lower case
nnoremap <leader>] gUiw
nnoremap <leader>[ guiw
" use command to open my vimrc
command! Editrc execute 'edit' vim_config_file
command! Reloadrc execute 'source' vim_config_file
" screen scroll add <nowait> to execute immediately
" see autocmd keymap_force to set scroll down
" use backspace to scroll up
nnoremap <silent><BS> <C-b>
" <leader> <Enter> to create new line in normal mode
nnoremap <silent><nowait><leader><Enter> :set paste<CR>m`o<ESC>``:set nopaste<CR>
" switch between buffers
nnoremap <silent><nowait><RIGHT> :bn<CR>
nnoremap <silent><nowait><LEFT> :bp<CR>
" cd to current file directory
nnoremap <leader>cd :lcd %:p:h<CR>
" map <esc> to quit terminal mode
tnoremap <Esc> <C-\><C-n>
" save
nnoremap <silent><Enter> :w<CR>

"}}}
" split current window
nnoremap <silent><leader>- :split<CR>
nnoremap <silent><leader>/ :vsplit<CR>
" quickfix list operations
nnoremap <C-j> :cnext<CR>
nnoremap <C-k> :cprevious<CR>
" }}}
" autocmd {{{
augroup filetype_specific
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
augroup END

augroup filetype_indent_size
  autocmd!
  autocmd FileType html,css,javascript,typescript,typescriptreact,vue,yaml,sql,json,vim
        \ setlocal tabstop=2 shiftwidth=2
  autocmd FileType text,markdown setlocal wrap linebreak sidescroll=5 listchars+=precedes:<,extends:>
  autocmd FileType text,markdown nnoremap j gj
  autocmd FileType text,markdown nnoremap k gk
  autocmd FileType text,markdown nnoremap 0 g0
  autocmd FileType text,markdown nnoremap $ g$
  autocmd FileType text,markdown nnoremap ^ g^
augroup END

function TrimEndLinesAndTrailingSpaces()
  let save_cursor = getpos(".")
  silent! %s#\($\n\s*\)\+\%$##
  silent! %s/\s\+$//e
  call setpos('.', save_cursor)
endfunction
augroup filetype_edit_behavior
  autocmd!
  autocmd FileType * setlocal textwidth=0
  " do not auto add comment when add new comment line in normal mode
  autocmd FileType * setlocal formatoptions-=o
  " auto remove all trailing empty lines before saving
  autocmd BufWritePre *.c,*.cpp,*.h,*.js,*.html,*.sh,*.py,*.md,*.yml,*.yaml
        \ call TrimEndLinesAndTrailingSpaces()
augroup END

augroup keymap_force
  autocmd!
  autocmd BufEnter * nnoremap <nowait><silent> <Space> <C-f>
augroup END

augroup windows_display
  autocmd!
  autocmd WinLeave * if &filetype!='help' && &filetype!='nerdtree' | setlocal norelativenumber number
  autocmd WinEnter * if &filetype!='help' && &filetype!='nerdtree' | setlocal relativenumber
augroup END

" delete other buffers {{{
command! -nargs=? -complete=buffer -bang Bonly
      \ :call BufOnly('<args>', '<bang>')

function! BufOnly(buffer, bang)
  if a:buffer == ''
    " No buffer provided, use the current buffer.
    let buffer = bufnr('%')
  elseif (a:buffer + 0) > 0
    " A buffer number was provided.
    let buffer = bufnr(a:buffer + 0)
  else
    " A buffer name was provided.
    let buffer = bufnr(a:buffer)
  endif

  if buffer == -1
    echohl ErrorMsg
    echomsg "No matching buffer for" a:buffer
    echohl None
    return
  endif

  let last_buffer = bufnr('$')

  let delete_count = 0
  let n = 1
  while n <= last_buffer
    if n != buffer && buflisted(n)
      if a:bang == '' && getbufvar(n, '&modified')
        echohl ErrorMsg
        echomsg 'No write since last change for buffer'
              \ n '(add ! to override)'
        echohl None
      else
        silent exe 'bdel' . a:bang . ' ' . n
        if ! buflisted(n)
          let delete_count = delete_count+1
        endif
      endif
    endif
    let n = n+1
  endwhile

  if delete_count == 1
    echomsg delete_count "buffer deleted"
  elseif delete_count > 1
    echomsg delete_count "buffers deleted"
  endif

endfunction
" }}}
" }}}
" statueline {{{
set statusline=\ %f
function FileWritableSign()
  return filewritable(expand('%')) == 0 ? ' ï€£' : ''
endfunction
set statusline+=%{FileWritableSign()}
set statusline+=\ %m
set statusline+=%=
set statusline+=%y
set statusline+=%7.50l/%-7.50L
set statusline+=%P
set statusline+=\ \ 
" }}}
" colorscheme plugins {{{
highlight Comment ctermfg=Gray guifg=Gray
highlight Visual guibg=#8fbcbb guifg=#000000
highlight Search guifg=#a3be8c guibg=#495057 gui=bold
highlight MatchParen guifg=#ffd43b guibg=NONE gui=bold
highlight Folded ctermfg=DarkGrey ctermbg=NONE guifg=DarkGrey guibg=NONE
highlight SignColumn guibg=NONE
highlight StatusLine ctermfg=Black ctermbg=Gray cterm=bold guifg=Black guibg=#869c98
highlight StatusLineNC ctermfg=LightGray ctermbg=DarkGray cterm=NONE guifg=LightGrey guibg=#495057

highlight BufTabLineCurrent guibg=#4c566a guifg=#eceff4 gui=bold
highlight BufTabLineFill guibg=NONE
highlight BufTabLineHidden guibg=NONE

highlight GitGutterAdd    guibg=NONE guifg=#74b816 ctermfg=2 gui=bold
highlight GitGutterChange guibg=NONE guifg=#fdb924 ctermfg=3 gui=bold
highlight GitGutterDelete guibg=NONE guifg=#c92a2a ctermfg=1 gui=bold
let &t_ut=''
set t_Co=256
set termguicolors
" }}}
