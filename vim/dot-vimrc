" editor 
" default 
set nocompatible
filetype plugin indent on
language en_US.UTF-8
" unicode characters in the file autoload/float.vim
set encoding=utf-8
set hidden
set number
set relativenumber
set backspace=2
set incsearch
set ignorecase
set smartcase
set tabstop=4 shiftwidth=4 expandtab smartindent autoindent shiftround
set softtabstop=4
set showcmd
set laststatus=1
set wildmenu
set showmatch
set autoread
set autowrite
set confirm
set updatetime=100
set noundofile
set nobackup
set clipboard=unnamed
set clipboard+=unnamedplus
set tags=tags
set shortmess+=c
set hlsearch
set mousehide
set signcolumn=yes
set nowrap
set cmdheight=1
set showtabline=2
set splitbelow
set splitright
set grepprg=rg\ -p\ --vimgrep\ --ignore-file\ ~/.vim/ignorefile
set grepformat=%f:%l:%c:%m

colorscheme bw

" keymappings 
inoremap jk <esc>
" quit
" use <Esc> instead of <M- keybind
nnoremap <Esc>q :x<CR>
nnoremap <leader>q :x<CR>
" close current or buffer
noremap <silent><Esc>b :bd<CR>
" use command to open my vimrc
command! Editrc execute 'edit' vim_config_file
command! Sourcerc execute 'source' vim_config_file
" screen scroll add <nowait> to execute immediately
" see autocmd keymap_force to set scroll down
" use backspace to scroll up
nnoremap <silent><BS> <C-b>
nnoremap <silent><Space> <C-f>
" cd to current file directory
nnoremap <leader>cd :lcd %:p:h<CR>
" save
nnoremap <silent><Enter> :w<CR>
" split current window
nnoremap <silent><leader>- :split<CR>
nnoremap <silent><leader>/ :vsplit<CR>
" quickfix list operations
nnoremap <C-j> :cnext<CR>
nnoremap <C-k> :cprevious<CR>
" switch between buffers
nnoremap <silent><nowait><RIGHT> :bn<CR>
nnoremap <silent><nowait><LEFT> :bp<CR>
" go next buffer
nnoremap <silent><TAB> :bn<CR>

" close current buffer
nnoremap <C-d> :bd<CR>
" write as root
cmap w!! w !sudo tee > /dev/null %

" window navigation
nnoremap <Esc>h <C-w>h
nnoremap <Esc>j <C-w>j
nnoremap <Esc>k <C-w>k
nnoremap <Esc>l <C-w>l

" autocmd 
augroup filetype_specific
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd BufRead *.log set filetype=text
augroup END

function! TrimEndLinesAndTrailingSpaces()
  let save_cursor = getpos(".")
  silent! %s#\($\n\s*\)\+\%$##
  silent! %s/\s\+$//e
  call setpos('.', save_cursor)
  " echom "trailing spaces and empty lines done!"
endfunction
augroup filetype_edit_behavior
  autocmd!
  autocmd FileType * setlocal textwidth=0
  " do not auto add comment when add new comment line in normal mode
  autocmd FileType * setlocal formatoptions-=o
  " auto remove all trailing empty lines before saving
  autocmd BufWritePre *.c,*.cpp,*.h,*.js,*.html,*.sh,*.py,*.md,*.yml,*.yaml
        \ call TrimEndLinesAndTrailingSpaces()
augroup END

augroup keymap_force
  autocmd!
  " unremap <CR> key when in quickfix list
  autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
augroup END

" delete other buffers 
nnoremap <leader>o :Bonly<CR>
command! -nargs=? -complete=buffer -bang Bonly
      \ :call BufOnly('<args>', '<bang>')

function! BufOnly(buffer, bang)
  if a:buffer == ''
    " No buffer provided, use the current buffer.
    let buffer = bufnr('%')
  elseif (a:buffer + 0) > 0
    " A buffer number was provided.
    let buffer = bufnr(a:buffer + 0)
  else
    " A buffer name was provided.
    let buffer = bufnr(a:buffer)
  endif

  if buffer == -1
    echohl ErrorMsg
    echomsg "No matching buffer for" a:buffer
    echohl None
    return
  endif

  let last_buffer = bufnr('$')

  let delete_count = 0
  let n = 1
  while n <= last_buffer
    if n != buffer && buflisted(n)
      if a:bang == '' && getbufvar(n, '&modified')
        echohl ErrorMsg
        echomsg 'No write since last change for buffer'
              \ n '(add ! to override)'
        echohl None
      else
        silent exe 'bdel' . a:bang . ' ' . n
        if ! buflisted(n)
          let delete_count = delete_count+1
        endif
      endif
    endif
    let n = n+1
  endwhile

  if delete_count == 1
    echomsg delete_count "buffer deleted"
  elseif delete_count > 1
    echomsg delete_count "buffers deleted"
  endif

endfunction
" 
" 
" statueline 
set statusline=\ %f
set statusline+=\ %r
set statusline+=%2m
set statusline+=%=
set statusline+=%y
set statusline+=%6.50l/%-6.50L
set statusline+=%P
set statusline+=\ \ 
" 
" 
" predefined variables 
let vim_config_file="~/.vimrc"
let plug_file="~/.vim/plug.vim"
let plugin_path="~/.vim/plugins/"
" 
" plugins 
execute 'source' plug_file
call plug#begin(fnameescape(plugin_path))
Plug 'git@github.com:tpope/vim-surround.git'
Plug 'git@github.com:tpope/vim-fugitive.git'
Plug 'git@github.com:justinmk/vim-sneak.git'
Plug 'git@github.com:preservim/nerdtree.git', { 'on': 'NERDTreeToggle'}
Plug 'git@github.com:romainl/vim-cool.git'
Plug 'git@github.com:ap/vim-buftabline.git'
call plug#end()
" 
" plugins setting 
" NERDTree
let NERDTreeMinimalUI=1
let g:NERDTreeStatusline=' ï­„'
let g:NERDTreeNodeDelimiter = "\u00a0"
let g:NERDTreeQuitOnOpen=3
let NERDTreeIgnore=[
      \ '\.lock$[[file]]', '\.o$[[file]]', '\.out$[[file]]', '\.class$[[file]]', '\.exe$[[file]]',
      \ '^node_modules$[[dir]]', '^dist$[[dir]]', '^packages$[[dir]]', '^target$[[dir]]', '^lib$[[dir]]'
      \ ]
noremap <silent><Esc>t :NERDTreeToggle<CR>
nnoremap <silent><F1> :NERDTreeToggle<CR>

" junegunn/fzf 
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1
" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading  --smart-case -- %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
nnoremap <C-p> :Files<cr>
nnoremap <C-l> :RG<cr>
" 
" buftabline 
let g:buftabline_show=1
let g:buftabline_indicators=1
let g:buftabline_numbers=2
nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)

syntax off
